// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

// Import user types
import { Id } from "../../../../libs/Id.sol";

struct ClassSystemTagMapData {
  bool hasTag;
  uint256 classIndex;
  uint256 tagIndex;
}

library ClassSystemTagMap {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "eveworld", name: "ClassSystemTagMa", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x7462657665776f726c64000000000000436c61737353797374656d5461674d61);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0041030001202000000000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (bytes32, bytes32)
  Schema constant _keySchema = Schema.wrap(0x004002005f5f0000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (bool, uint256, uint256)
  Schema constant _valueSchema = Schema.wrap(0x00410300601f1f00000000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](2);
    keyNames[0] = "classId";
    keyNames[1] = "tagId";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](3);
    fieldNames[0] = "hasTag";
    fieldNames[1] = "classIndex";
    fieldNames[2] = "tagIndex";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get hasTag.
   */
  function getHasTag(Id classId, Id tagId) internal view returns (bool hasTag) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = Id.unwrap(classId);
    _keyTuple[1] = Id.unwrap(tagId);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Get hasTag.
   */
  function _getHasTag(Id classId, Id tagId) internal view returns (bool hasTag) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = Id.unwrap(classId);
    _keyTuple[1] = Id.unwrap(tagId);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (_toBool(uint8(bytes1(_blob))));
  }

  /**
   * @notice Set hasTag.
   */
  function setHasTag(Id classId, Id tagId, bool hasTag) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = Id.unwrap(classId);
    _keyTuple[1] = Id.unwrap(tagId);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((hasTag)), _fieldLayout);
  }

  /**
   * @notice Set hasTag.
   */
  function _setHasTag(Id classId, Id tagId, bool hasTag) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = Id.unwrap(classId);
    _keyTuple[1] = Id.unwrap(tagId);

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((hasTag)), _fieldLayout);
  }

  /**
   * @notice Get classIndex.
   */
  function getClassIndex(Id classId, Id tagId) internal view returns (uint256 classIndex) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = Id.unwrap(classId);
    _keyTuple[1] = Id.unwrap(tagId);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get classIndex.
   */
  function _getClassIndex(Id classId, Id tagId) internal view returns (uint256 classIndex) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = Id.unwrap(classId);
    _keyTuple[1] = Id.unwrap(tagId);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set classIndex.
   */
  function setClassIndex(Id classId, Id tagId, uint256 classIndex) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = Id.unwrap(classId);
    _keyTuple[1] = Id.unwrap(tagId);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((classIndex)), _fieldLayout);
  }

  /**
   * @notice Set classIndex.
   */
  function _setClassIndex(Id classId, Id tagId, uint256 classIndex) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = Id.unwrap(classId);
    _keyTuple[1] = Id.unwrap(tagId);

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((classIndex)), _fieldLayout);
  }

  /**
   * @notice Get tagIndex.
   */
  function getTagIndex(Id classId, Id tagId) internal view returns (uint256 tagIndex) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = Id.unwrap(classId);
    _keyTuple[1] = Id.unwrap(tagId);

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get tagIndex.
   */
  function _getTagIndex(Id classId, Id tagId) internal view returns (uint256 tagIndex) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = Id.unwrap(classId);
    _keyTuple[1] = Id.unwrap(tagId);

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set tagIndex.
   */
  function setTagIndex(Id classId, Id tagId, uint256 tagIndex) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = Id.unwrap(classId);
    _keyTuple[1] = Id.unwrap(tagId);

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((tagIndex)), _fieldLayout);
  }

  /**
   * @notice Set tagIndex.
   */
  function _setTagIndex(Id classId, Id tagId, uint256 tagIndex) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = Id.unwrap(classId);
    _keyTuple[1] = Id.unwrap(tagId);

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((tagIndex)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(Id classId, Id tagId) internal view returns (ClassSystemTagMapData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = Id.unwrap(classId);
    _keyTuple[1] = Id.unwrap(tagId);

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(Id classId, Id tagId) internal view returns (ClassSystemTagMapData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = Id.unwrap(classId);
    _keyTuple[1] = Id.unwrap(tagId);

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(Id classId, Id tagId, bool hasTag, uint256 classIndex, uint256 tagIndex) internal {
    bytes memory _staticData = encodeStatic(hasTag, classIndex, tagIndex);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = Id.unwrap(classId);
    _keyTuple[1] = Id.unwrap(tagId);

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(Id classId, Id tagId, bool hasTag, uint256 classIndex, uint256 tagIndex) internal {
    bytes memory _staticData = encodeStatic(hasTag, classIndex, tagIndex);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = Id.unwrap(classId);
    _keyTuple[1] = Id.unwrap(tagId);

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(Id classId, Id tagId, ClassSystemTagMapData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.hasTag, _table.classIndex, _table.tagIndex);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = Id.unwrap(classId);
    _keyTuple[1] = Id.unwrap(tagId);

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(Id classId, Id tagId, ClassSystemTagMapData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.hasTag, _table.classIndex, _table.tagIndex);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = Id.unwrap(classId);
    _keyTuple[1] = Id.unwrap(tagId);

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(bytes memory _blob) internal pure returns (bool hasTag, uint256 classIndex, uint256 tagIndex) {
    hasTag = (_toBool(uint8(Bytes.getBytes1(_blob, 0))));

    classIndex = (uint256(Bytes.getBytes32(_blob, 1)));

    tagIndex = (uint256(Bytes.getBytes32(_blob, 33)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (ClassSystemTagMapData memory _table) {
    (_table.hasTag, _table.classIndex, _table.tagIndex) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(Id classId, Id tagId) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = Id.unwrap(classId);
    _keyTuple[1] = Id.unwrap(tagId);

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(Id classId, Id tagId) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = Id.unwrap(classId);
    _keyTuple[1] = Id.unwrap(tagId);

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(bool hasTag, uint256 classIndex, uint256 tagIndex) internal pure returns (bytes memory) {
    return abi.encodePacked(hasTag, classIndex, tagIndex);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    bool hasTag,
    uint256 classIndex,
    uint256 tagIndex
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(hasTag, classIndex, tagIndex);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(Id classId, Id tagId) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = Id.unwrap(classId);
    _keyTuple[1] = Id.unwrap(tagId);

    return _keyTuple;
  }
}

/**
 * @notice Cast a value to a bool.
 * @dev Boolean values are encoded as uint8 (1 = true, 0 = false), but Solidity doesn't allow casting between uint8 and bool.
 * @param value The uint8 value to convert.
 * @return result The boolean value.
 */
function _toBool(uint8 value) pure returns (bool result) {
  assembly {
    result := value
  }
}
